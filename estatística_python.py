# -*- coding: utf-8 -*-
"""Estatística-python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10RdGdYz4KWQhyBWVPayDhLbonkGB6uOc

##Estatística em Python:
"""

import pandas as pd
import numpy as np
import seaborn as sns
import scipy as scp

print('Versão do pandas -> %s' % pd.__version__)
print('Versão do numpy -> %s' % np.__version__)
print('Versão do seaborn -> %s' % sb.__version__)
print('Versão do scipy -> %s' % scp.__version__)

"""### Variáveis utilizadas

> ### Renda
> ***

Rendimento mensal do trabalho principal para pessoas de 10 anos ou mais de idade.

> ### Idade
> ***

Idade do morador na data de referência em anos.

> ### Altura (elaboração própria)
> ***

Altura do morador em metros.

> ### UF
> ***

|Código|Descrição|
|---|---|
|11|Rondônia|
|12|Acre|
|13|Amazonas|
|14|Roraima|
|15|Pará|
|16|Amapá|
|17|Tocantins|
|21|Maranhão|
|22|Piauí|
|23|Ceará|
|24|Rio Grande do Norte|
|25|Paraíba|
|26|Pernambuco|
|27|Alagoas|
|28|Sergipe|
|29|Bahia|
|31|Minas Gerais|
|32|Espírito Santo|
|33|Rio de Janeiro|
|35|São Paulo|
|41|Paraná|
|42|Santa Catarina|
|43|Rio Grande do Sul|
|50|Mato Grosso do Sul|
|51|Mato Grosso|
|52|Goiás|
|53|Distrito Federal|

> ### Sexo	
> ***

|Código|Descrição|
|---|---|
|0|Masculino|
|1|Feminino|

> ### Anos de Estudo
> ***

|Código|Descrição|
|---|---|
|1|Sem instrução e menos de 1 ano|
|2|1 ano|
|3|2 anos|
|4|3 anos|
|5|4 anos|
|6|5 anos|
|7|6 anos|
|8|7 anos|
|9|8 anos|
|10|9 anos|
|11|10 anos|
|12|11 anos|
|13|12 anos|
|14|13 anos|
|15|14 anos|
|16|15 anos ou mais|
|17|Não determinados| 
||Não aplicável|

> ### Cor
> ***

|Código|Descrição|
|---|---|
|0|Indígena|
|2|Branca|
|4|Preta|
|6|Amarela|
|8|Parda|
|9|Sem declaração|

##Importando pandas e lendo o dataset do projeto
"""

dados = pd.read_csv("dados.csv")

dados.head()

sorted(dados['Anos de Estudo'].unique())

#Descobrindo os pontos mais altos e mais baixos
print(dados['Idade'].min())
dados['Idade'].max()

#Distribuição de variáveis:
dados['Sexo'].value_counts()

#Para uma compreensão percentual mais apurada:
dados['Sexo'].value_counts(normalize = True)

#69% são homens e 30% são mulheres.

#De uma forma mais adequada:
frequencia = dados['Sexo'].value_counts()
percentual = dados['Sexo'].value_counts(normalize = True) * 100

dist_freq_qualitativas = pd.DataFrame({'Frequência': frequencia, 'Porcentagem (%)': percentual})

dist_freq_qualitativas

#Renomeando o Index para os sexos e a coluna do index:
dist_freq_qualitativas.rename(index = {0: 'Masculino', 1: 'Feminino'}, inplace = True)
dist_freq_qualitativas.rename_axis('Sexo', axis = 'columns', inplace = True)

dist_freq_qualitativas

#Entendendo distribuição cruzada:
sexo = {0: 'Masculino',
        1: 'Feminino'}

cor = {0: 'Indígena',
        2: 'Branca',
        4: 'Preta',
        6: 'Amarela',
        8: 'Parda',
        9: 'Sem declaração'}

frequencia = pd.crosstab(dados.Sexo, dados.Cor)

frequencia.rename(index= sexo, inplace=True)
frequencia.rename(columns= cor, inplace= True)

frequencia

percentual = pd.crosstab(dados.Sexo, dados.Cor, normalize= True)

percentual.rename(index= sexo, inplace=True)
percentual.rename(columns= cor, inplace= True)

percentual

#Observado o cruzamento entre variáveis:
#Os valores obtidos correspondem à renda de cada etnia e sexo do dataframe
percentual = pd.crosstab(dados.Sexo, dados.Cor, aggfunc= "mean", values = dados.Renda)

percentual.rename(index= sexo, inplace=True)
percentual.rename(columns= cor, inplace= True)

percentual

"""#Variáveis quantitativas"""

dados.Renda.min()

dados.Renda.max()

classes = [0, 1576, 3152, 7880, 15770, 200000]
labels = ['E', 'D', 'C', 'B', 'A']

#Criar agora a relação entre as classes economicas e as classificações das rendas:
pd.cut(x= dados.Renda, bins = classes, labels=labels, include_lowest=True).head()

#em uma forma mais palatável:
frequencia = pd.value_counts(pd.cut(x= dados.Renda, bins = classes, labels=labels, include_lowest=True))
frequencia

#Em percentual:
percentual = pd.value_counts(pd.cut(x= dados.Renda, bins = classes, labels=labels, include_lowest=True), normalize = True)
percentual

dist_freq_quantitativas = pd.DataFrame({'Frequência': frequencia, 'Porcentagem (%)': percentual})
dist_freq_quantitativas

#Invertendo a ordem de amostragem:
dist_freq_quantitativas.sort_index(ascending=False)

"""#Trabalhando com Histogramas:"""

ax = sns.distplot(dados.Altura, kde = False)

ax = sns.distplot(dados.Altura, kde = False)

ax.figure.set_size_inches(12, 6)
ax.set_title('Distribuição de Frequências - Altura', fontsize=18)
ax.set_xlabel('Metros', fontsize=14)
ax

ax = sns.distplot(dados.Altura)

ax.figure.set_size_inches(12, 6)
ax.set_title('Distribuição de Frequências - Altura - KDE', fontsize=18)
ax.set_xlabel('Metros', fontsize=14)
ax

dados.Altura.hist(bins = 50, figsize=(12,6))